/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/v1/spanner.proto

package com.google.spanner.v1;

/**
 *
 *
 * <pre>
 * The request for [ExecuteBatchDml][google.spanner.v1.Spanner.ExecuteBatchDml].
 * </pre>
 *
 * Protobuf type {@code google.spanner.v1.ExecuteBatchDmlRequest}
 */
public final class ExecuteBatchDmlRequest extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.spanner.v1.ExecuteBatchDmlRequest)
    ExecuteBatchDmlRequestOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use ExecuteBatchDmlRequest.newBuilder() to construct.
  private ExecuteBatchDmlRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private ExecuteBatchDmlRequest() {
    session_ = "";
    statements_ = java.util.Collections.emptyList();
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(UnusedPrivateParameter unused) {
    return new ExecuteBatchDmlRequest();
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  private ExecuteBatchDmlRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10:
            {
              String s = input.readStringRequireUtf8();

              session_ = s;
              break;
            }
          case 18:
            {
              TransactionSelector.Builder subBuilder = null;
              if (transaction_ != null) {
                subBuilder = transaction_.toBuilder();
              }
              transaction_ = input.readMessage(TransactionSelector.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(transaction_);
                transaction_ = subBuilder.buildPartial();
              }

              break;
            }
          case 26:
            {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                statements_ = new java.util.ArrayList<Statement>();
                mutable_bitField0_ |= 0x00000001;
              }
              statements_.add(input.readMessage(Statement.parser(), extensionRegistry));
              break;
            }
          case 32:
            {
              seqno_ = input.readInt64();
              break;
            }
          case 42:
            {
              RequestOptions.Builder subBuilder = null;
              if (requestOptions_ != null) {
                subBuilder = requestOptions_.toBuilder();
              }
              requestOptions_ = input.readMessage(RequestOptions.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(requestOptions_);
                requestOptions_ = subBuilder.buildPartial();
              }

              break;
            }
          default:
            {
              if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        statements_ = java.util.Collections.unmodifiableList(statements_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return SpannerProto.internal_static_google_spanner_v1_ExecuteBatchDmlRequest_descriptor;
  }

  @Override
  protected FieldAccessorTable internalGetFieldAccessorTable() {
    return SpannerProto.internal_static_google_spanner_v1_ExecuteBatchDmlRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(ExecuteBatchDmlRequest.class, Builder.class);
  }

  public interface StatementOrBuilder
      extends
      // @@protoc_insertion_point(interface_extends:google.spanner.v1.ExecuteBatchDmlRequest.Statement)
      com.google.protobuf.MessageOrBuilder {

    /**
     *
     *
     * <pre>
     * Required. The DML string.
     * </pre>
     *
     * <code>string sql = 1;</code>
     *
     * @return The sql.
     */
    String getSql();
    /**
     *
     *
     * <pre>
     * Required. The DML string.
     * </pre>
     *
     * <code>string sql = 1;</code>
     *
     * @return The bytes for sql.
     */
    com.google.protobuf.ByteString getSqlBytes();

    /**
     *
     *
     * <pre>
     * Parameter names and values that bind to placeholders in the DML string.
     * A parameter placeholder consists of the `&#64;` character followed by the
     * parameter name (for example, `&#64;firstName`). Parameter names can contain
     * letters, numbers, and underscores.
     * Parameters can appear anywhere that a literal value is expected.  The
     * same parameter name can be used more than once, for example:
     * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
     * It is an error to execute a SQL statement with unbound parameters.
     * </pre>
     *
     * <code>.google.protobuf.Struct params = 2;</code>
     *
     * @return Whether the params field is set.
     */
    boolean hasParams();
    /**
     *
     *
     * <pre>
     * Parameter names and values that bind to placeholders in the DML string.
     * A parameter placeholder consists of the `&#64;` character followed by the
     * parameter name (for example, `&#64;firstName`). Parameter names can contain
     * letters, numbers, and underscores.
     * Parameters can appear anywhere that a literal value is expected.  The
     * same parameter name can be used more than once, for example:
     * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
     * It is an error to execute a SQL statement with unbound parameters.
     * </pre>
     *
     * <code>.google.protobuf.Struct params = 2;</code>
     *
     * @return The params.
     */
    com.google.protobuf.Struct getParams();
    /**
     *
     *
     * <pre>
     * Parameter names and values that bind to placeholders in the DML string.
     * A parameter placeholder consists of the `&#64;` character followed by the
     * parameter name (for example, `&#64;firstName`). Parameter names can contain
     * letters, numbers, and underscores.
     * Parameters can appear anywhere that a literal value is expected.  The
     * same parameter name can be used more than once, for example:
     * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
     * It is an error to execute a SQL statement with unbound parameters.
     * </pre>
     *
     * <code>.google.protobuf.Struct params = 2;</code>
     */
    com.google.protobuf.StructOrBuilder getParamsOrBuilder();

    /**
     *
     *
     * <pre>
     * It is not always possible for Cloud Spanner to infer the right SQL type
     * from a JSON value.  For example, values of type `BYTES` and values
     * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
     * In these cases, `param_types` can be used to specify the exact
     * SQL type for some or all of the SQL statement parameters. See the
     * definition of [Type][google.spanner.v1.Type] for more information
     * about SQL types.
     * </pre>
     *
     * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
     */
    int getParamTypesCount();
    /**
     *
     *
     * <pre>
     * It is not always possible for Cloud Spanner to infer the right SQL type
     * from a JSON value.  For example, values of type `BYTES` and values
     * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
     * In these cases, `param_types` can be used to specify the exact
     * SQL type for some or all of the SQL statement parameters. See the
     * definition of [Type][google.spanner.v1.Type] for more information
     * about SQL types.
     * </pre>
     *
     * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
     */
    boolean containsParamTypes(String key);
    /** Use {@link #getParamTypesMap()} instead. */
    @Deprecated
    java.util.Map<String, Type> getParamTypes();
    /**
     *
     *
     * <pre>
     * It is not always possible for Cloud Spanner to infer the right SQL type
     * from a JSON value.  For example, values of type `BYTES` and values
     * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
     * In these cases, `param_types` can be used to specify the exact
     * SQL type for some or all of the SQL statement parameters. See the
     * definition of [Type][google.spanner.v1.Type] for more information
     * about SQL types.
     * </pre>
     *
     * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
     */
    java.util.Map<String, Type> getParamTypesMap();
    /**
     *
     *
     * <pre>
     * It is not always possible for Cloud Spanner to infer the right SQL type
     * from a JSON value.  For example, values of type `BYTES` and values
     * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
     * In these cases, `param_types` can be used to specify the exact
     * SQL type for some or all of the SQL statement parameters. See the
     * definition of [Type][google.spanner.v1.Type] for more information
     * about SQL types.
     * </pre>
     *
     * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
     */
    Type getParamTypesOrDefault(String key, Type defaultValue);
    /**
     *
     *
     * <pre>
     * It is not always possible for Cloud Spanner to infer the right SQL type
     * from a JSON value.  For example, values of type `BYTES` and values
     * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
     * In these cases, `param_types` can be used to specify the exact
     * SQL type for some or all of the SQL statement parameters. See the
     * definition of [Type][google.spanner.v1.Type] for more information
     * about SQL types.
     * </pre>
     *
     * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
     */
    Type getParamTypesOrThrow(String key);
  }
  /**
   *
   *
   * <pre>
   * A single DML statement.
   * </pre>
   *
   * Protobuf type {@code google.spanner.v1.ExecuteBatchDmlRequest.Statement}
   */
  public static final class Statement extends com.google.protobuf.GeneratedMessageV3
      implements
      // @@protoc_insertion_point(message_implements:google.spanner.v1.ExecuteBatchDmlRequest.Statement)
      StatementOrBuilder {
    private static final long serialVersionUID = 0L;
    // Use Statement.newBuilder() to construct.
    private Statement(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private Statement() {
      sql_ = "";
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(UnusedPrivateParameter unused) {
      return new Statement();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
      return this.unknownFields;
    }

    private Statement(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                String s = input.readStringRequireUtf8();

                sql_ = s;
                break;
              }
            case 18:
              {
                com.google.protobuf.Struct.Builder subBuilder = null;
                if (params_ != null) {
                  subBuilder = params_.toBuilder();
                }
                params_ = input.readMessage(com.google.protobuf.Struct.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(params_);
                  params_ = subBuilder.buildPartial();
                }

                break;
              }
            case 26:
              {
                if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                  paramTypes_ =
                      com.google.protobuf.MapField.newMapField(
                          ParamTypesDefaultEntryHolder.defaultEntry);
                  mutable_bitField0_ |= 0x00000001;
                }
                com.google.protobuf.MapEntry<String, Type> paramTypes__ =
                    input.readMessage(
                        ParamTypesDefaultEntryHolder.defaultEntry.getParserForType(),
                        extensionRegistry);
                paramTypes_.getMutableMap().put(paramTypes__.getKey(), paramTypes__.getValue());
                break;
              }
            default:
              {
                if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }

    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return SpannerProto
          .internal_static_google_spanner_v1_ExecuteBatchDmlRequest_Statement_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @Override
    protected com.google.protobuf.MapField internalGetMapField(int number) {
      switch (number) {
        case 3:
          return internalGetParamTypes();
        default:
          throw new RuntimeException("Invalid map field number: " + number);
      }
    }

    @Override
    protected FieldAccessorTable internalGetFieldAccessorTable() {
      return SpannerProto
          .internal_static_google_spanner_v1_ExecuteBatchDmlRequest_Statement_fieldAccessorTable
          .ensureFieldAccessorsInitialized(Statement.class, Builder.class);
    }

    public static final int SQL_FIELD_NUMBER = 1;
    private volatile Object sql_;
    /**
     *
     *
     * <pre>
     * Required. The DML string.
     * </pre>
     *
     * <code>string sql = 1;</code>
     *
     * @return The sql.
     */
    @Override
    public String getSql() {
      Object ref = sql_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        sql_ = s;
        return s;
      }
    }
    /**
     *
     *
     * <pre>
     * Required. The DML string.
     * </pre>
     *
     * <code>string sql = 1;</code>
     *
     * @return The bytes for sql.
     */
    @Override
    public com.google.protobuf.ByteString getSqlBytes() {
      Object ref = sql_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        sql_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PARAMS_FIELD_NUMBER = 2;
    private com.google.protobuf.Struct params_;
    /**
     *
     *
     * <pre>
     * Parameter names and values that bind to placeholders in the DML string.
     * A parameter placeholder consists of the `&#64;` character followed by the
     * parameter name (for example, `&#64;firstName`). Parameter names can contain
     * letters, numbers, and underscores.
     * Parameters can appear anywhere that a literal value is expected.  The
     * same parameter name can be used more than once, for example:
     * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
     * It is an error to execute a SQL statement with unbound parameters.
     * </pre>
     *
     * <code>.google.protobuf.Struct params = 2;</code>
     *
     * @return Whether the params field is set.
     */
    @Override
    public boolean hasParams() {
      return params_ != null;
    }
    /**
     *
     *
     * <pre>
     * Parameter names and values that bind to placeholders in the DML string.
     * A parameter placeholder consists of the `&#64;` character followed by the
     * parameter name (for example, `&#64;firstName`). Parameter names can contain
     * letters, numbers, and underscores.
     * Parameters can appear anywhere that a literal value is expected.  The
     * same parameter name can be used more than once, for example:
     * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
     * It is an error to execute a SQL statement with unbound parameters.
     * </pre>
     *
     * <code>.google.protobuf.Struct params = 2;</code>
     *
     * @return The params.
     */
    @Override
    public com.google.protobuf.Struct getParams() {
      return params_ == null ? com.google.protobuf.Struct.getDefaultInstance() : params_;
    }
    /**
     *
     *
     * <pre>
     * Parameter names and values that bind to placeholders in the DML string.
     * A parameter placeholder consists of the `&#64;` character followed by the
     * parameter name (for example, `&#64;firstName`). Parameter names can contain
     * letters, numbers, and underscores.
     * Parameters can appear anywhere that a literal value is expected.  The
     * same parameter name can be used more than once, for example:
     * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
     * It is an error to execute a SQL statement with unbound parameters.
     * </pre>
     *
     * <code>.google.protobuf.Struct params = 2;</code>
     */
    @Override
    public com.google.protobuf.StructOrBuilder getParamsOrBuilder() {
      return getParams();
    }

    public static final int PARAM_TYPES_FIELD_NUMBER = 3;

    private static final class ParamTypesDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<String, Type> defaultEntry =
          com.google.protobuf.MapEntry.<String, Type>newDefaultInstance(
              SpannerProto
                  .internal_static_google_spanner_v1_ExecuteBatchDmlRequest_Statement_ParamTypesEntry_descriptor,
              com.google.protobuf.WireFormat.FieldType.STRING,
              "",
              com.google.protobuf.WireFormat.FieldType.MESSAGE,
              Type.getDefaultInstance());
    }

    private com.google.protobuf.MapField<String, Type> paramTypes_;

    private com.google.protobuf.MapField<String, Type> internalGetParamTypes() {
      if (paramTypes_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            ParamTypesDefaultEntryHolder.defaultEntry);
      }
      return paramTypes_;
    }

    public int getParamTypesCount() {
      return internalGetParamTypes().getMap().size();
    }
    /**
     *
     *
     * <pre>
     * It is not always possible for Cloud Spanner to infer the right SQL type
     * from a JSON value.  For example, values of type `BYTES` and values
     * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
     * In these cases, `param_types` can be used to specify the exact
     * SQL type for some or all of the SQL statement parameters. See the
     * definition of [Type][google.spanner.v1.Type] for more information
     * about SQL types.
     * </pre>
     *
     * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
     */
    @Override
    public boolean containsParamTypes(String key) {
      if (key == null) {
        throw new NullPointerException();
      }
      return internalGetParamTypes().getMap().containsKey(key);
    }
    /** Use {@link #getParamTypesMap()} instead. */
    @Override
    @Deprecated
    public java.util.Map<String, Type> getParamTypes() {
      return getParamTypesMap();
    }
    /**
     *
     *
     * <pre>
     * It is not always possible for Cloud Spanner to infer the right SQL type
     * from a JSON value.  For example, values of type `BYTES` and values
     * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
     * In these cases, `param_types` can be used to specify the exact
     * SQL type for some or all of the SQL statement parameters. See the
     * definition of [Type][google.spanner.v1.Type] for more information
     * about SQL types.
     * </pre>
     *
     * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
     */
    @Override
    public java.util.Map<String, Type> getParamTypesMap() {
      return internalGetParamTypes().getMap();
    }
    /**
     *
     *
     * <pre>
     * It is not always possible for Cloud Spanner to infer the right SQL type
     * from a JSON value.  For example, values of type `BYTES` and values
     * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
     * In these cases, `param_types` can be used to specify the exact
     * SQL type for some or all of the SQL statement parameters. See the
     * definition of [Type][google.spanner.v1.Type] for more information
     * about SQL types.
     * </pre>
     *
     * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
     */
    @Override
    public Type getParamTypesOrDefault(String key, Type defaultValue) {
      if (key == null) {
        throw new NullPointerException();
      }
      java.util.Map<String, Type> map = internalGetParamTypes().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     *
     *
     * <pre>
     * It is not always possible for Cloud Spanner to infer the right SQL type
     * from a JSON value.  For example, values of type `BYTES` and values
     * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
     * In these cases, `param_types` can be used to specify the exact
     * SQL type for some or all of the SQL statement parameters. See the
     * definition of [Type][google.spanner.v1.Type] for more information
     * about SQL types.
     * </pre>
     *
     * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
     */
    @Override
    public Type getParamTypesOrThrow(String key) {
      if (key == null) {
        throw new NullPointerException();
      }
      java.util.Map<String, Type> map = internalGetParamTypes().getMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;

    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
      if (!getSqlBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, sql_);
      }
      if (params_ != null) {
        output.writeMessage(2, getParams());
      }
      com.google.protobuf.GeneratedMessageV3.serializeStringMapTo(
          output, internalGetParamTypes(), ParamTypesDefaultEntryHolder.defaultEntry, 3);
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getSqlBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, sql_);
      }
      if (params_ != null) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, getParams());
      }
      for (java.util.Map.Entry<String, Type> entry : internalGetParamTypes().getMap().entrySet()) {
        com.google.protobuf.MapEntry<String, Type> paramTypes__ =
            ParamTypesDefaultEntryHolder.defaultEntry
                .newBuilderForType()
                .setKey(entry.getKey())
                .setValue(entry.getValue())
                .build();
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, paramTypes__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof Statement)) {
        return super.equals(obj);
      }
      Statement other = (Statement) obj;

      if (!getSql().equals(other.getSql())) return false;
      if (hasParams() != other.hasParams()) return false;
      if (hasParams()) {
        if (!getParams().equals(other.getParams())) return false;
      }
      if (!internalGetParamTypes().equals(other.internalGetParamTypes())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SQL_FIELD_NUMBER;
      hash = (53 * hash) + getSql().hashCode();
      if (hasParams()) {
        hash = (37 * hash) + PARAMS_FIELD_NUMBER;
        hash = (53 * hash) + getParams().hashCode();
      }
      if (!internalGetParamTypes().getMap().isEmpty()) {
        hash = (37 * hash) + PARAM_TYPES_FIELD_NUMBER;
        hash = (53 * hash) + internalGetParamTypes().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Statement parseFrom(java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static Statement parseFrom(
        java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static Statement parseFrom(com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static Statement parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static Statement parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static Statement parseFrom(
        byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static Statement parseFrom(java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static Statement parseFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static Statement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static Statement parseDelimitedFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static Statement parseFrom(com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static Statement parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(Statement prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     *
     *
     * <pre>
     * A single DML statement.
     * </pre>
     *
     * Protobuf type {@code google.spanner.v1.ExecuteBatchDmlRequest.Statement}
     */
    public static final class Builder
        extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
        implements
        // @@protoc_insertion_point(builder_implements:google.spanner.v1.ExecuteBatchDmlRequest.Statement)
        StatementOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return SpannerProto
            .internal_static_google_spanner_v1_ExecuteBatchDmlRequest_Statement_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(int number) {
        switch (number) {
          case 3:
            return internalGetParamTypes();
          default:
            throw new RuntimeException("Invalid map field number: " + number);
        }
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(int number) {
        switch (number) {
          case 3:
            return internalGetMutableParamTypes();
          default:
            throw new RuntimeException("Invalid map field number: " + number);
        }
      }

      @Override
      protected FieldAccessorTable internalGetFieldAccessorTable() {
        return SpannerProto
            .internal_static_google_spanner_v1_ExecuteBatchDmlRequest_Statement_fieldAccessorTable
            .ensureFieldAccessorsInitialized(Statement.class, Builder.class);
      }

      // Construct using com.google.spanner.v1.ExecuteBatchDmlRequest.Statement.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {}
      }

      @Override
      public Builder clear() {
        super.clear();
        sql_ = "";

        if (paramsBuilder_ == null) {
          params_ = null;
        } else {
          params_ = null;
          paramsBuilder_ = null;
        }
        internalGetMutableParamTypes().clear();
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
        return SpannerProto
            .internal_static_google_spanner_v1_ExecuteBatchDmlRequest_Statement_descriptor;
      }

      @Override
      public Statement getDefaultInstanceForType() {
        return Statement.getDefaultInstance();
      }

      @Override
      public Statement build() {
        Statement result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Statement buildPartial() {
        Statement result = new Statement(this);
        int from_bitField0_ = bitField0_;
        result.sql_ = sql_;
        if (paramsBuilder_ == null) {
          result.params_ = params_;
        } else {
          result.params_ = paramsBuilder_.build();
        }
        result.paramTypes_ = internalGetParamTypes();
        result.paramTypes_.makeImmutable();
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }

      @Override
      public Builder setField(com.google.protobuf.Descriptors.FieldDescriptor field, Object value) {
        return super.setField(field, value);
      }

      @Override
      public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }

      @Override
      public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }

      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }

      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, Object value) {
        return super.addRepeatedField(field, value);
      }

      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Statement) {
          return mergeFrom((Statement) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Statement other) {
        if (other == Statement.getDefaultInstance()) return this;
        if (!other.getSql().isEmpty()) {
          sql_ = other.sql_;
          onChanged();
        }
        if (other.hasParams()) {
          mergeParams(other.getParams());
        }
        internalGetMutableParamTypes().mergeFrom(other.internalGetParamTypes());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Statement parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Statement) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int bitField0_;

      private Object sql_ = "";
      /**
       *
       *
       * <pre>
       * Required. The DML string.
       * </pre>
       *
       * <code>string sql = 1;</code>
       *
       * @return The sql.
       */
      public String getSql() {
        Object ref = sql_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          sql_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       *
       *
       * <pre>
       * Required. The DML string.
       * </pre>
       *
       * <code>string sql = 1;</code>
       *
       * @return The bytes for sql.
       */
      public com.google.protobuf.ByteString getSqlBytes() {
        Object ref = sql_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8((String) ref);
          sql_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       *
       *
       * <pre>
       * Required. The DML string.
       * </pre>
       *
       * <code>string sql = 1;</code>
       *
       * @param value The sql to set.
       * @return This builder for chaining.
       */
      public Builder setSql(String value) {
        if (value == null) {
          throw new NullPointerException();
        }

        sql_ = value;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * Required. The DML string.
       * </pre>
       *
       * <code>string sql = 1;</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearSql() {

        sql_ = getDefaultInstance().getSql();
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * Required. The DML string.
       * </pre>
       *
       * <code>string sql = 1;</code>
       *
       * @param value The bytes for sql to set.
       * @return This builder for chaining.
       */
      public Builder setSqlBytes(com.google.protobuf.ByteString value) {
        if (value == null) {
          throw new NullPointerException();
        }
        checkByteStringIsUtf8(value);

        sql_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.Struct params_;
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Struct,
              com.google.protobuf.Struct.Builder,
              com.google.protobuf.StructOrBuilder>
          paramsBuilder_;
      /**
       *
       *
       * <pre>
       * Parameter names and values that bind to placeholders in the DML string.
       * A parameter placeholder consists of the `&#64;` character followed by the
       * parameter name (for example, `&#64;firstName`). Parameter names can contain
       * letters, numbers, and underscores.
       * Parameters can appear anywhere that a literal value is expected.  The
       * same parameter name can be used more than once, for example:
       * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
       * It is an error to execute a SQL statement with unbound parameters.
       * </pre>
       *
       * <code>.google.protobuf.Struct params = 2;</code>
       *
       * @return Whether the params field is set.
       */
      public boolean hasParams() {
        return paramsBuilder_ != null || params_ != null;
      }
      /**
       *
       *
       * <pre>
       * Parameter names and values that bind to placeholders in the DML string.
       * A parameter placeholder consists of the `&#64;` character followed by the
       * parameter name (for example, `&#64;firstName`). Parameter names can contain
       * letters, numbers, and underscores.
       * Parameters can appear anywhere that a literal value is expected.  The
       * same parameter name can be used more than once, for example:
       * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
       * It is an error to execute a SQL statement with unbound parameters.
       * </pre>
       *
       * <code>.google.protobuf.Struct params = 2;</code>
       *
       * @return The params.
       */
      public com.google.protobuf.Struct getParams() {
        if (paramsBuilder_ == null) {
          return params_ == null ? com.google.protobuf.Struct.getDefaultInstance() : params_;
        } else {
          return paramsBuilder_.getMessage();
        }
      }
      /**
       *
       *
       * <pre>
       * Parameter names and values that bind to placeholders in the DML string.
       * A parameter placeholder consists of the `&#64;` character followed by the
       * parameter name (for example, `&#64;firstName`). Parameter names can contain
       * letters, numbers, and underscores.
       * Parameters can appear anywhere that a literal value is expected.  The
       * same parameter name can be used more than once, for example:
       * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
       * It is an error to execute a SQL statement with unbound parameters.
       * </pre>
       *
       * <code>.google.protobuf.Struct params = 2;</code>
       */
      public Builder setParams(com.google.protobuf.Struct value) {
        if (paramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          params_ = value;
          onChanged();
        } else {
          paramsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * Parameter names and values that bind to placeholders in the DML string.
       * A parameter placeholder consists of the `&#64;` character followed by the
       * parameter name (for example, `&#64;firstName`). Parameter names can contain
       * letters, numbers, and underscores.
       * Parameters can appear anywhere that a literal value is expected.  The
       * same parameter name can be used more than once, for example:
       * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
       * It is an error to execute a SQL statement with unbound parameters.
       * </pre>
       *
       * <code>.google.protobuf.Struct params = 2;</code>
       */
      public Builder setParams(com.google.protobuf.Struct.Builder builderForValue) {
        if (paramsBuilder_ == null) {
          params_ = builderForValue.build();
          onChanged();
        } else {
          paramsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * Parameter names and values that bind to placeholders in the DML string.
       * A parameter placeholder consists of the `&#64;` character followed by the
       * parameter name (for example, `&#64;firstName`). Parameter names can contain
       * letters, numbers, and underscores.
       * Parameters can appear anywhere that a literal value is expected.  The
       * same parameter name can be used more than once, for example:
       * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
       * It is an error to execute a SQL statement with unbound parameters.
       * </pre>
       *
       * <code>.google.protobuf.Struct params = 2;</code>
       */
      public Builder mergeParams(com.google.protobuf.Struct value) {
        if (paramsBuilder_ == null) {
          if (params_ != null) {
            params_ =
                com.google.protobuf.Struct.newBuilder(params_).mergeFrom(value).buildPartial();
          } else {
            params_ = value;
          }
          onChanged();
        } else {
          paramsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * Parameter names and values that bind to placeholders in the DML string.
       * A parameter placeholder consists of the `&#64;` character followed by the
       * parameter name (for example, `&#64;firstName`). Parameter names can contain
       * letters, numbers, and underscores.
       * Parameters can appear anywhere that a literal value is expected.  The
       * same parameter name can be used more than once, for example:
       * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
       * It is an error to execute a SQL statement with unbound parameters.
       * </pre>
       *
       * <code>.google.protobuf.Struct params = 2;</code>
       */
      public Builder clearParams() {
        if (paramsBuilder_ == null) {
          params_ = null;
          onChanged();
        } else {
          params_ = null;
          paramsBuilder_ = null;
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * Parameter names and values that bind to placeholders in the DML string.
       * A parameter placeholder consists of the `&#64;` character followed by the
       * parameter name (for example, `&#64;firstName`). Parameter names can contain
       * letters, numbers, and underscores.
       * Parameters can appear anywhere that a literal value is expected.  The
       * same parameter name can be used more than once, for example:
       * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
       * It is an error to execute a SQL statement with unbound parameters.
       * </pre>
       *
       * <code>.google.protobuf.Struct params = 2;</code>
       */
      public com.google.protobuf.Struct.Builder getParamsBuilder() {

        onChanged();
        return getParamsFieldBuilder().getBuilder();
      }
      /**
       *
       *
       * <pre>
       * Parameter names and values that bind to placeholders in the DML string.
       * A parameter placeholder consists of the `&#64;` character followed by the
       * parameter name (for example, `&#64;firstName`). Parameter names can contain
       * letters, numbers, and underscores.
       * Parameters can appear anywhere that a literal value is expected.  The
       * same parameter name can be used more than once, for example:
       * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
       * It is an error to execute a SQL statement with unbound parameters.
       * </pre>
       *
       * <code>.google.protobuf.Struct params = 2;</code>
       */
      public com.google.protobuf.StructOrBuilder getParamsOrBuilder() {
        if (paramsBuilder_ != null) {
          return paramsBuilder_.getMessageOrBuilder();
        } else {
          return params_ == null ? com.google.protobuf.Struct.getDefaultInstance() : params_;
        }
      }
      /**
       *
       *
       * <pre>
       * Parameter names and values that bind to placeholders in the DML string.
       * A parameter placeholder consists of the `&#64;` character followed by the
       * parameter name (for example, `&#64;firstName`). Parameter names can contain
       * letters, numbers, and underscores.
       * Parameters can appear anywhere that a literal value is expected.  The
       * same parameter name can be used more than once, for example:
       * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
       * It is an error to execute a SQL statement with unbound parameters.
       * </pre>
       *
       * <code>.google.protobuf.Struct params = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Struct,
              com.google.protobuf.Struct.Builder,
              com.google.protobuf.StructOrBuilder>
          getParamsFieldBuilder() {
        if (paramsBuilder_ == null) {
          paramsBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  com.google.protobuf.Struct,
                  com.google.protobuf.Struct.Builder,
                  com.google.protobuf.StructOrBuilder>(
                  getParams(), getParentForChildren(), isClean());
          params_ = null;
        }
        return paramsBuilder_;
      }

      private com.google.protobuf.MapField<String, Type> paramTypes_;

      private com.google.protobuf.MapField<String, Type> internalGetParamTypes() {
        if (paramTypes_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              ParamTypesDefaultEntryHolder.defaultEntry);
        }
        return paramTypes_;
      }

      private com.google.protobuf.MapField<String, Type> internalGetMutableParamTypes() {
        onChanged();
        ;
        if (paramTypes_ == null) {
          paramTypes_ =
              com.google.protobuf.MapField.newMapField(ParamTypesDefaultEntryHolder.defaultEntry);
        }
        if (!paramTypes_.isMutable()) {
          paramTypes_ = paramTypes_.copy();
        }
        return paramTypes_;
      }

      public int getParamTypesCount() {
        return internalGetParamTypes().getMap().size();
      }
      /**
       *
       *
       * <pre>
       * It is not always possible for Cloud Spanner to infer the right SQL type
       * from a JSON value.  For example, values of type `BYTES` and values
       * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
       * In these cases, `param_types` can be used to specify the exact
       * SQL type for some or all of the SQL statement parameters. See the
       * definition of [Type][google.spanner.v1.Type] for more information
       * about SQL types.
       * </pre>
       *
       * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
       */
      @Override
      public boolean containsParamTypes(String key) {
        if (key == null) {
          throw new NullPointerException();
        }
        return internalGetParamTypes().getMap().containsKey(key);
      }
      /** Use {@link #getParamTypesMap()} instead. */
      @Override
      @Deprecated
      public java.util.Map<String, Type> getParamTypes() {
        return getParamTypesMap();
      }
      /**
       *
       *
       * <pre>
       * It is not always possible for Cloud Spanner to infer the right SQL type
       * from a JSON value.  For example, values of type `BYTES` and values
       * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
       * In these cases, `param_types` can be used to specify the exact
       * SQL type for some or all of the SQL statement parameters. See the
       * definition of [Type][google.spanner.v1.Type] for more information
       * about SQL types.
       * </pre>
       *
       * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
       */
      @Override
      public java.util.Map<String, Type> getParamTypesMap() {
        return internalGetParamTypes().getMap();
      }
      /**
       *
       *
       * <pre>
       * It is not always possible for Cloud Spanner to infer the right SQL type
       * from a JSON value.  For example, values of type `BYTES` and values
       * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
       * In these cases, `param_types` can be used to specify the exact
       * SQL type for some or all of the SQL statement parameters. See the
       * definition of [Type][google.spanner.v1.Type] for more information
       * about SQL types.
       * </pre>
       *
       * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
       */
      @Override
      public Type getParamTypesOrDefault(String key, Type defaultValue) {
        if (key == null) {
          throw new NullPointerException();
        }
        java.util.Map<String, Type> map = internalGetParamTypes().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       *
       *
       * <pre>
       * It is not always possible for Cloud Spanner to infer the right SQL type
       * from a JSON value.  For example, values of type `BYTES` and values
       * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
       * In these cases, `param_types` can be used to specify the exact
       * SQL type for some or all of the SQL statement parameters. See the
       * definition of [Type][google.spanner.v1.Type] for more information
       * about SQL types.
       * </pre>
       *
       * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
       */
      @Override
      public Type getParamTypesOrThrow(String key) {
        if (key == null) {
          throw new NullPointerException();
        }
        java.util.Map<String, Type> map = internalGetParamTypes().getMap();
        if (!map.containsKey(key)) {
          throw new IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearParamTypes() {
        internalGetMutableParamTypes().getMutableMap().clear();
        return this;
      }
      /**
       *
       *
       * <pre>
       * It is not always possible for Cloud Spanner to infer the right SQL type
       * from a JSON value.  For example, values of type `BYTES` and values
       * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
       * In these cases, `param_types` can be used to specify the exact
       * SQL type for some or all of the SQL statement parameters. See the
       * definition of [Type][google.spanner.v1.Type] for more information
       * about SQL types.
       * </pre>
       *
       * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
       */
      public Builder removeParamTypes(String key) {
        if (key == null) {
          throw new NullPointerException();
        }
        internalGetMutableParamTypes().getMutableMap().remove(key);
        return this;
      }
      /** Use alternate mutation accessors instead. */
      @Deprecated
      public java.util.Map<String, Type> getMutableParamTypes() {
        return internalGetMutableParamTypes().getMutableMap();
      }
      /**
       *
       *
       * <pre>
       * It is not always possible for Cloud Spanner to infer the right SQL type
       * from a JSON value.  For example, values of type `BYTES` and values
       * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
       * In these cases, `param_types` can be used to specify the exact
       * SQL type for some or all of the SQL statement parameters. See the
       * definition of [Type][google.spanner.v1.Type] for more information
       * about SQL types.
       * </pre>
       *
       * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
       */
      public Builder putParamTypes(String key, Type value) {
        if (key == null) {
          throw new NullPointerException();
        }
        if (value == null) {
          throw new NullPointerException();
        }
        internalGetMutableParamTypes().getMutableMap().put(key, value);
        return this;
      }
      /**
       *
       *
       * <pre>
       * It is not always possible for Cloud Spanner to infer the right SQL type
       * from a JSON value.  For example, values of type `BYTES` and values
       * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
       * In these cases, `param_types` can be used to specify the exact
       * SQL type for some or all of the SQL statement parameters. See the
       * definition of [Type][google.spanner.v1.Type] for more information
       * about SQL types.
       * </pre>
       *
       * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
       */
      public Builder putAllParamTypes(java.util.Map<String, Type> values) {
        internalGetMutableParamTypes().getMutableMap().putAll(values);
        return this;
      }

      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }

      // @@protoc_insertion_point(builder_scope:google.spanner.v1.ExecuteBatchDmlRequest.Statement)
    }

    // @@protoc_insertion_point(class_scope:google.spanner.v1.ExecuteBatchDmlRequest.Statement)
    private static final Statement DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new Statement();
    }

    public static Statement getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Statement> PARSER =
        new com.google.protobuf.AbstractParser<Statement>() {
          @Override
          public Statement parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new Statement(input, extensionRegistry);
          }
        };

    public static com.google.protobuf.Parser<Statement> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Statement> getParserForType() {
      return PARSER;
    }

    @Override
    public Statement getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }
  }

  public static final int SESSION_FIELD_NUMBER = 1;
  private volatile Object session_;
  /**
   *
   *
   * <pre>
   * Required. The session in which the DML statements should be performed.
   * </pre>
   *
   * <code>
   * string session = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
   * </code>
   *
   * @return The session.
   */
  @Override
  public String getSession() {
    Object ref = session_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      session_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * Required. The session in which the DML statements should be performed.
   * </pre>
   *
   * <code>
   * string session = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
   * </code>
   *
   * @return The bytes for session.
   */
  @Override
  public com.google.protobuf.ByteString getSessionBytes() {
    Object ref = session_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = com.google.protobuf.ByteString.copyFromUtf8((String) ref);
      session_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TRANSACTION_FIELD_NUMBER = 2;
  private TransactionSelector transaction_;
  /**
   *
   *
   * <pre>
   * Required. The transaction to use. Must be a read-write transaction.
   * To protect against replays, single-use transactions are not supported. The
   * caller must either supply an existing transaction ID or begin a new
   * transaction.
   * </pre>
   *
   * <code>
   * .google.spanner.v1.TransactionSelector transaction = 2 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return Whether the transaction field is set.
   */
  @Override
  public boolean hasTransaction() {
    return transaction_ != null;
  }
  /**
   *
   *
   * <pre>
   * Required. The transaction to use. Must be a read-write transaction.
   * To protect against replays, single-use transactions are not supported. The
   * caller must either supply an existing transaction ID or begin a new
   * transaction.
   * </pre>
   *
   * <code>
   * .google.spanner.v1.TransactionSelector transaction = 2 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return The transaction.
   */
  @Override
  public TransactionSelector getTransaction() {
    return transaction_ == null ? TransactionSelector.getDefaultInstance() : transaction_;
  }
  /**
   *
   *
   * <pre>
   * Required. The transaction to use. Must be a read-write transaction.
   * To protect against replays, single-use transactions are not supported. The
   * caller must either supply an existing transaction ID or begin a new
   * transaction.
   * </pre>
   *
   * <code>
   * .google.spanner.v1.TransactionSelector transaction = 2 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   */
  @Override
  public TransactionSelectorOrBuilder getTransactionOrBuilder() {
    return getTransaction();
  }

  public static final int STATEMENTS_FIELD_NUMBER = 3;
  private java.util.List<Statement> statements_;
  /**
   *
   *
   * <pre>
   * Required. The list of statements to execute in this batch. Statements are executed
   * serially, such that the effects of statement `i` are visible to statement
   * `i+1`. Each statement must be a DML statement. Execution stops at the
   * first failed statement; the remaining statements are not executed.
   * Callers must provide at least one statement.
   * </pre>
   *
   * <code>
   * repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   */
  @Override
  public java.util.List<Statement> getStatementsList() {
    return statements_;
  }
  /**
   *
   *
   * <pre>
   * Required. The list of statements to execute in this batch. Statements are executed
   * serially, such that the effects of statement `i` are visible to statement
   * `i+1`. Each statement must be a DML statement. Execution stops at the
   * first failed statement; the remaining statements are not executed.
   * Callers must provide at least one statement.
   * </pre>
   *
   * <code>
   * repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   */
  @Override
  public java.util.List<? extends StatementOrBuilder> getStatementsOrBuilderList() {
    return statements_;
  }
  /**
   *
   *
   * <pre>
   * Required. The list of statements to execute in this batch. Statements are executed
   * serially, such that the effects of statement `i` are visible to statement
   * `i+1`. Each statement must be a DML statement. Execution stops at the
   * first failed statement; the remaining statements are not executed.
   * Callers must provide at least one statement.
   * </pre>
   *
   * <code>
   * repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   */
  @Override
  public int getStatementsCount() {
    return statements_.size();
  }
  /**
   *
   *
   * <pre>
   * Required. The list of statements to execute in this batch. Statements are executed
   * serially, such that the effects of statement `i` are visible to statement
   * `i+1`. Each statement must be a DML statement. Execution stops at the
   * first failed statement; the remaining statements are not executed.
   * Callers must provide at least one statement.
   * </pre>
   *
   * <code>
   * repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   */
  @Override
  public Statement getStatements(int index) {
    return statements_.get(index);
  }
  /**
   *
   *
   * <pre>
   * Required. The list of statements to execute in this batch. Statements are executed
   * serially, such that the effects of statement `i` are visible to statement
   * `i+1`. Each statement must be a DML statement. Execution stops at the
   * first failed statement; the remaining statements are not executed.
   * Callers must provide at least one statement.
   * </pre>
   *
   * <code>
   * repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   */
  @Override
  public StatementOrBuilder getStatementsOrBuilder(int index) {
    return statements_.get(index);
  }

  public static final int SEQNO_FIELD_NUMBER = 4;
  private long seqno_;
  /**
   *
   *
   * <pre>
   * Required. A per-transaction sequence number used to identify this request. This field
   * makes each request idempotent such that if the request is received multiple
   * times, at most one will succeed.
   * The sequence number must be monotonically increasing within the
   * transaction. If a request arrives for the first time with an out-of-order
   * sequence number, the transaction may be aborted. Replays of previously
   * handled requests will yield the same response as the first execution.
   * </pre>
   *
   * <code>int64 seqno = 4 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The seqno.
   */
  @Override
  public long getSeqno() {
    return seqno_;
  }

  public static final int REQUEST_OPTIONS_FIELD_NUMBER = 5;
  private RequestOptions requestOptions_;
  /**
   *
   *
   * <pre>
   * Common options for this request.
   * </pre>
   *
   * <code>.google.spanner.v1.RequestOptions request_options = 5;</code>
   *
   * @return Whether the requestOptions field is set.
   */
  @Override
  public boolean hasRequestOptions() {
    return requestOptions_ != null;
  }
  /**
   *
   *
   * <pre>
   * Common options for this request.
   * </pre>
   *
   * <code>.google.spanner.v1.RequestOptions request_options = 5;</code>
   *
   * @return The requestOptions.
   */
  @Override
  public RequestOptions getRequestOptions() {
    return requestOptions_ == null ? RequestOptions.getDefaultInstance() : requestOptions_;
  }
  /**
   *
   *
   * <pre>
   * Common options for this request.
   * </pre>
   *
   * <code>.google.spanner.v1.RequestOptions request_options = 5;</code>
   */
  @Override
  public RequestOptionsOrBuilder getRequestOptionsOrBuilder() {
    return getRequestOptions();
  }

  private byte memoizedIsInitialized = -1;

  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (!getSessionBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, session_);
    }
    if (transaction_ != null) {
      output.writeMessage(2, getTransaction());
    }
    for (int i = 0; i < statements_.size(); i++) {
      output.writeMessage(3, statements_.get(i));
    }
    if (seqno_ != 0L) {
      output.writeInt64(4, seqno_);
    }
    if (requestOptions_ != null) {
      output.writeMessage(5, getRequestOptions());
    }
    unknownFields.writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getSessionBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, session_);
    }
    if (transaction_ != null) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, getTransaction());
    }
    for (int i = 0; i < statements_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, statements_.get(i));
    }
    if (seqno_ != 0L) {
      size += com.google.protobuf.CodedOutputStream.computeInt64Size(4, seqno_);
    }
    if (requestOptions_ != null) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(5, getRequestOptions());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof ExecuteBatchDmlRequest)) {
      return super.equals(obj);
    }
    ExecuteBatchDmlRequest other = (ExecuteBatchDmlRequest) obj;

    if (!getSession().equals(other.getSession())) return false;
    if (hasTransaction() != other.hasTransaction()) return false;
    if (hasTransaction()) {
      if (!getTransaction().equals(other.getTransaction())) return false;
    }
    if (!getStatementsList().equals(other.getStatementsList())) return false;
    if (getSeqno() != other.getSeqno()) return false;
    if (hasRequestOptions() != other.hasRequestOptions()) return false;
    if (hasRequestOptions()) {
      if (!getRequestOptions().equals(other.getRequestOptions())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + SESSION_FIELD_NUMBER;
    hash = (53 * hash) + getSession().hashCode();
    if (hasTransaction()) {
      hash = (37 * hash) + TRANSACTION_FIELD_NUMBER;
      hash = (53 * hash) + getTransaction().hashCode();
    }
    if (getStatementsCount() > 0) {
      hash = (37 * hash) + STATEMENTS_FIELD_NUMBER;
      hash = (53 * hash) + getStatementsList().hashCode();
    }
    hash = (37 * hash) + SEQNO_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(getSeqno());
    if (hasRequestOptions()) {
      hash = (37 * hash) + REQUEST_OPTIONS_FIELD_NUMBER;
      hash = (53 * hash) + getRequestOptions().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static ExecuteBatchDmlRequest parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static ExecuteBatchDmlRequest parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static ExecuteBatchDmlRequest parseFrom(com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static ExecuteBatchDmlRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static ExecuteBatchDmlRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static ExecuteBatchDmlRequest parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static ExecuteBatchDmlRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static ExecuteBatchDmlRequest parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static ExecuteBatchDmlRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static ExecuteBatchDmlRequest parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static ExecuteBatchDmlRequest parseFrom(com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static ExecuteBatchDmlRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(ExecuteBatchDmlRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * The request for [ExecuteBatchDml][google.spanner.v1.Spanner.ExecuteBatchDml].
   * </pre>
   *
   * Protobuf type {@code google.spanner.v1.ExecuteBatchDmlRequest}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.spanner.v1.ExecuteBatchDmlRequest)
      ExecuteBatchDmlRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return SpannerProto.internal_static_google_spanner_v1_ExecuteBatchDmlRequest_descriptor;
    }

    @Override
    protected FieldAccessorTable internalGetFieldAccessorTable() {
      return SpannerProto
          .internal_static_google_spanner_v1_ExecuteBatchDmlRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(ExecuteBatchDmlRequest.class, Builder.class);
    }

    // Construct using com.google.spanner.v1.ExecuteBatchDmlRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getStatementsFieldBuilder();
      }
    }

    @Override
    public Builder clear() {
      super.clear();
      session_ = "";

      if (transactionBuilder_ == null) {
        transaction_ = null;
      } else {
        transaction_ = null;
        transactionBuilder_ = null;
      }
      if (statementsBuilder_ == null) {
        statements_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        statementsBuilder_.clear();
      }
      seqno_ = 0L;

      if (requestOptionsBuilder_ == null) {
        requestOptions_ = null;
      } else {
        requestOptions_ = null;
        requestOptionsBuilder_ = null;
      }
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return SpannerProto.internal_static_google_spanner_v1_ExecuteBatchDmlRequest_descriptor;
    }

    @Override
    public ExecuteBatchDmlRequest getDefaultInstanceForType() {
      return ExecuteBatchDmlRequest.getDefaultInstance();
    }

    @Override
    public ExecuteBatchDmlRequest build() {
      ExecuteBatchDmlRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public ExecuteBatchDmlRequest buildPartial() {
      ExecuteBatchDmlRequest result = new ExecuteBatchDmlRequest(this);
      int from_bitField0_ = bitField0_;
      result.session_ = session_;
      if (transactionBuilder_ == null) {
        result.transaction_ = transaction_;
      } else {
        result.transaction_ = transactionBuilder_.build();
      }
      if (statementsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          statements_ = java.util.Collections.unmodifiableList(statements_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.statements_ = statements_;
      } else {
        result.statements_ = statementsBuilder_.build();
      }
      result.seqno_ = seqno_;
      if (requestOptionsBuilder_ == null) {
        result.requestOptions_ = requestOptions_;
      } else {
        result.requestOptions_ = requestOptionsBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }

    @Override
    public Builder setField(com.google.protobuf.Descriptors.FieldDescriptor field, Object value) {
      return super.setField(field, value);
    }

    @Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, Object value) {
      return super.addRepeatedField(field, value);
    }

    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof ExecuteBatchDmlRequest) {
        return mergeFrom((ExecuteBatchDmlRequest) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(ExecuteBatchDmlRequest other) {
      if (other == ExecuteBatchDmlRequest.getDefaultInstance()) return this;
      if (!other.getSession().isEmpty()) {
        session_ = other.session_;
        onChanged();
      }
      if (other.hasTransaction()) {
        mergeTransaction(other.getTransaction());
      }
      if (statementsBuilder_ == null) {
        if (!other.statements_.isEmpty()) {
          if (statements_.isEmpty()) {
            statements_ = other.statements_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureStatementsIsMutable();
            statements_.addAll(other.statements_);
          }
          onChanged();
        }
      } else {
        if (!other.statements_.isEmpty()) {
          if (statementsBuilder_.isEmpty()) {
            statementsBuilder_.dispose();
            statementsBuilder_ = null;
            statements_ = other.statements_;
            bitField0_ = (bitField0_ & ~0x00000001);
            statementsBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getStatementsFieldBuilder()
                    : null;
          } else {
            statementsBuilder_.addAllMessages(other.statements_);
          }
        }
      }
      if (other.getSeqno() != 0L) {
        setSeqno(other.getSeqno());
      }
      if (other.hasRequestOptions()) {
        mergeRequestOptions(other.getRequestOptions());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      ExecuteBatchDmlRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (ExecuteBatchDmlRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private int bitField0_;

    private Object session_ = "";
    /**
     *
     *
     * <pre>
     * Required. The session in which the DML statements should be performed.
     * </pre>
     *
     * <code>
     * string session = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
     * </code>
     *
     * @return The session.
     */
    public String getSession() {
      Object ref = session_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        session_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Required. The session in which the DML statements should be performed.
     * </pre>
     *
     * <code>
     * string session = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
     * </code>
     *
     * @return The bytes for session.
     */
    public com.google.protobuf.ByteString getSessionBytes() {
      Object ref = session_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        session_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Required. The session in which the DML statements should be performed.
     * </pre>
     *
     * <code>
     * string session = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
     * </code>
     *
     * @param value The session to set.
     * @return This builder for chaining.
     */
    public Builder setSession(String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      session_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The session in which the DML statements should be performed.
     * </pre>
     *
     * <code>
     * string session = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearSession() {

      session_ = getDefaultInstance().getSession();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The session in which the DML statements should be performed.
     * </pre>
     *
     * <code>
     * string session = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
     * </code>
     *
     * @param value The bytes for session to set.
     * @return This builder for chaining.
     */
    public Builder setSessionBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      session_ = value;
      onChanged();
      return this;
    }

    private TransactionSelector transaction_;
    private com.google.protobuf.SingleFieldBuilderV3<
            TransactionSelector, TransactionSelector.Builder, TransactionSelectorOrBuilder>
        transactionBuilder_;
    /**
     *
     *
     * <pre>
     * Required. The transaction to use. Must be a read-write transaction.
     * To protect against replays, single-use transactions are not supported. The
     * caller must either supply an existing transaction ID or begin a new
     * transaction.
     * </pre>
     *
     * <code>
     * .google.spanner.v1.TransactionSelector transaction = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return Whether the transaction field is set.
     */
    public boolean hasTransaction() {
      return transactionBuilder_ != null || transaction_ != null;
    }
    /**
     *
     *
     * <pre>
     * Required. The transaction to use. Must be a read-write transaction.
     * To protect against replays, single-use transactions are not supported. The
     * caller must either supply an existing transaction ID or begin a new
     * transaction.
     * </pre>
     *
     * <code>
     * .google.spanner.v1.TransactionSelector transaction = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The transaction.
     */
    public TransactionSelector getTransaction() {
      if (transactionBuilder_ == null) {
        return transaction_ == null ? TransactionSelector.getDefaultInstance() : transaction_;
      } else {
        return transactionBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Required. The transaction to use. Must be a read-write transaction.
     * To protect against replays, single-use transactions are not supported. The
     * caller must either supply an existing transaction ID or begin a new
     * transaction.
     * </pre>
     *
     * <code>
     * .google.spanner.v1.TransactionSelector transaction = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder setTransaction(TransactionSelector value) {
      if (transactionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        transaction_ = value;
        onChanged();
      } else {
        transactionBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The transaction to use. Must be a read-write transaction.
     * To protect against replays, single-use transactions are not supported. The
     * caller must either supply an existing transaction ID or begin a new
     * transaction.
     * </pre>
     *
     * <code>
     * .google.spanner.v1.TransactionSelector transaction = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder setTransaction(TransactionSelector.Builder builderForValue) {
      if (transactionBuilder_ == null) {
        transaction_ = builderForValue.build();
        onChanged();
      } else {
        transactionBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The transaction to use. Must be a read-write transaction.
     * To protect against replays, single-use transactions are not supported. The
     * caller must either supply an existing transaction ID or begin a new
     * transaction.
     * </pre>
     *
     * <code>
     * .google.spanner.v1.TransactionSelector transaction = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder mergeTransaction(TransactionSelector value) {
      if (transactionBuilder_ == null) {
        if (transaction_ != null) {
          transaction_ =
              TransactionSelector.newBuilder(transaction_).mergeFrom(value).buildPartial();
        } else {
          transaction_ = value;
        }
        onChanged();
      } else {
        transactionBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The transaction to use. Must be a read-write transaction.
     * To protect against replays, single-use transactions are not supported. The
     * caller must either supply an existing transaction ID or begin a new
     * transaction.
     * </pre>
     *
     * <code>
     * .google.spanner.v1.TransactionSelector transaction = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder clearTransaction() {
      if (transactionBuilder_ == null) {
        transaction_ = null;
        onChanged();
      } else {
        transaction_ = null;
        transactionBuilder_ = null;
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The transaction to use. Must be a read-write transaction.
     * To protect against replays, single-use transactions are not supported. The
     * caller must either supply an existing transaction ID or begin a new
     * transaction.
     * </pre>
     *
     * <code>
     * .google.spanner.v1.TransactionSelector transaction = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public TransactionSelector.Builder getTransactionBuilder() {

      onChanged();
      return getTransactionFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Required. The transaction to use. Must be a read-write transaction.
     * To protect against replays, single-use transactions are not supported. The
     * caller must either supply an existing transaction ID or begin a new
     * transaction.
     * </pre>
     *
     * <code>
     * .google.spanner.v1.TransactionSelector transaction = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public TransactionSelectorOrBuilder getTransactionOrBuilder() {
      if (transactionBuilder_ != null) {
        return transactionBuilder_.getMessageOrBuilder();
      } else {
        return transaction_ == null ? TransactionSelector.getDefaultInstance() : transaction_;
      }
    }
    /**
     *
     *
     * <pre>
     * Required. The transaction to use. Must be a read-write transaction.
     * To protect against replays, single-use transactions are not supported. The
     * caller must either supply an existing transaction ID or begin a new
     * transaction.
     * </pre>
     *
     * <code>
     * .google.spanner.v1.TransactionSelector transaction = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            TransactionSelector, TransactionSelector.Builder, TransactionSelectorOrBuilder>
        getTransactionFieldBuilder() {
      if (transactionBuilder_ == null) {
        transactionBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                TransactionSelector, TransactionSelector.Builder, TransactionSelectorOrBuilder>(
                getTransaction(), getParentForChildren(), isClean());
        transaction_ = null;
      }
      return transactionBuilder_;
    }

    private java.util.List<Statement> statements_ = java.util.Collections.emptyList();

    private void ensureStatementsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        statements_ = new java.util.ArrayList<Statement>(statements_);
        bitField0_ |= 0x00000001;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            Statement, Statement.Builder, StatementOrBuilder>
        statementsBuilder_;

    /**
     *
     *
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>
     * repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public java.util.List<Statement> getStatementsList() {
      if (statementsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(statements_);
      } else {
        return statementsBuilder_.getMessageList();
      }
    }
    /**
     *
     *
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>
     * repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public int getStatementsCount() {
      if (statementsBuilder_ == null) {
        return statements_.size();
      } else {
        return statementsBuilder_.getCount();
      }
    }
    /**
     *
     *
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>
     * repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Statement getStatements(int index) {
      if (statementsBuilder_ == null) {
        return statements_.get(index);
      } else {
        return statementsBuilder_.getMessage(index);
      }
    }
    /**
     *
     *
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>
     * repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder setStatements(int index, Statement value) {
      if (statementsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStatementsIsMutable();
        statements_.set(index, value);
        onChanged();
      } else {
        statementsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>
     * repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder setStatements(int index, Statement.Builder builderForValue) {
      if (statementsBuilder_ == null) {
        ensureStatementsIsMutable();
        statements_.set(index, builderForValue.build());
        onChanged();
      } else {
        statementsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>
     * repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder addStatements(Statement value) {
      if (statementsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStatementsIsMutable();
        statements_.add(value);
        onChanged();
      } else {
        statementsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>
     * repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder addStatements(int index, Statement value) {
      if (statementsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStatementsIsMutable();
        statements_.add(index, value);
        onChanged();
      } else {
        statementsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>
     * repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder addStatements(Statement.Builder builderForValue) {
      if (statementsBuilder_ == null) {
        ensureStatementsIsMutable();
        statements_.add(builderForValue.build());
        onChanged();
      } else {
        statementsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>
     * repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder addStatements(int index, Statement.Builder builderForValue) {
      if (statementsBuilder_ == null) {
        ensureStatementsIsMutable();
        statements_.add(index, builderForValue.build());
        onChanged();
      } else {
        statementsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>
     * repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder addAllStatements(Iterable<? extends Statement> values) {
      if (statementsBuilder_ == null) {
        ensureStatementsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, statements_);
        onChanged();
      } else {
        statementsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>
     * repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder clearStatements() {
      if (statementsBuilder_ == null) {
        statements_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        statementsBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>
     * repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder removeStatements(int index) {
      if (statementsBuilder_ == null) {
        ensureStatementsIsMutable();
        statements_.remove(index);
        onChanged();
      } else {
        statementsBuilder_.remove(index);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>
     * repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Statement.Builder getStatementsBuilder(int index) {
      return getStatementsFieldBuilder().getBuilder(index);
    }
    /**
     *
     *
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>
     * repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public StatementOrBuilder getStatementsOrBuilder(int index) {
      if (statementsBuilder_ == null) {
        return statements_.get(index);
      } else {
        return statementsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     *
     *
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>
     * repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public java.util.List<? extends StatementOrBuilder> getStatementsOrBuilderList() {
      if (statementsBuilder_ != null) {
        return statementsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(statements_);
      }
    }
    /**
     *
     *
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>
     * repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Statement.Builder addStatementsBuilder() {
      return getStatementsFieldBuilder().addBuilder(Statement.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>
     * repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Statement.Builder addStatementsBuilder(int index) {
      return getStatementsFieldBuilder().addBuilder(index, Statement.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>
     * repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public java.util.List<Statement.Builder> getStatementsBuilderList() {
      return getStatementsFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            Statement, Statement.Builder, StatementOrBuilder>
        getStatementsFieldBuilder() {
      if (statementsBuilder_ == null) {
        statementsBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                Statement, Statement.Builder, StatementOrBuilder>(
                statements_, ((bitField0_ & 0x00000001) != 0), getParentForChildren(), isClean());
        statements_ = null;
      }
      return statementsBuilder_;
    }

    private long seqno_;
    /**
     *
     *
     * <pre>
     * Required. A per-transaction sequence number used to identify this request. This field
     * makes each request idempotent such that if the request is received multiple
     * times, at most one will succeed.
     * The sequence number must be monotonically increasing within the
     * transaction. If a request arrives for the first time with an out-of-order
     * sequence number, the transaction may be aborted. Replays of previously
     * handled requests will yield the same response as the first execution.
     * </pre>
     *
     * <code>int64 seqno = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return The seqno.
     */
    @Override
    public long getSeqno() {
      return seqno_;
    }
    /**
     *
     *
     * <pre>
     * Required. A per-transaction sequence number used to identify this request. This field
     * makes each request idempotent such that if the request is received multiple
     * times, at most one will succeed.
     * The sequence number must be monotonically increasing within the
     * transaction. If a request arrives for the first time with an out-of-order
     * sequence number, the transaction may be aborted. Replays of previously
     * handled requests will yield the same response as the first execution.
     * </pre>
     *
     * <code>int64 seqno = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @param value The seqno to set.
     * @return This builder for chaining.
     */
    public Builder setSeqno(long value) {

      seqno_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. A per-transaction sequence number used to identify this request. This field
     * makes each request idempotent such that if the request is received multiple
     * times, at most one will succeed.
     * The sequence number must be monotonically increasing within the
     * transaction. If a request arrives for the first time with an out-of-order
     * sequence number, the transaction may be aborted. Replays of previously
     * handled requests will yield the same response as the first execution.
     * </pre>
     *
     * <code>int64 seqno = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearSeqno() {

      seqno_ = 0L;
      onChanged();
      return this;
    }

    private RequestOptions requestOptions_;
    private com.google.protobuf.SingleFieldBuilderV3<
            RequestOptions, RequestOptions.Builder, RequestOptionsOrBuilder>
        requestOptionsBuilder_;
    /**
     *
     *
     * <pre>
     * Common options for this request.
     * </pre>
     *
     * <code>.google.spanner.v1.RequestOptions request_options = 5;</code>
     *
     * @return Whether the requestOptions field is set.
     */
    public boolean hasRequestOptions() {
      return requestOptionsBuilder_ != null || requestOptions_ != null;
    }
    /**
     *
     *
     * <pre>
     * Common options for this request.
     * </pre>
     *
     * <code>.google.spanner.v1.RequestOptions request_options = 5;</code>
     *
     * @return The requestOptions.
     */
    public RequestOptions getRequestOptions() {
      if (requestOptionsBuilder_ == null) {
        return requestOptions_ == null ? RequestOptions.getDefaultInstance() : requestOptions_;
      } else {
        return requestOptionsBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Common options for this request.
     * </pre>
     *
     * <code>.google.spanner.v1.RequestOptions request_options = 5;</code>
     */
    public Builder setRequestOptions(RequestOptions value) {
      if (requestOptionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        requestOptions_ = value;
        onChanged();
      } else {
        requestOptionsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Common options for this request.
     * </pre>
     *
     * <code>.google.spanner.v1.RequestOptions request_options = 5;</code>
     */
    public Builder setRequestOptions(RequestOptions.Builder builderForValue) {
      if (requestOptionsBuilder_ == null) {
        requestOptions_ = builderForValue.build();
        onChanged();
      } else {
        requestOptionsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Common options for this request.
     * </pre>
     *
     * <code>.google.spanner.v1.RequestOptions request_options = 5;</code>
     */
    public Builder mergeRequestOptions(RequestOptions value) {
      if (requestOptionsBuilder_ == null) {
        if (requestOptions_ != null) {
          requestOptions_ =
              RequestOptions.newBuilder(requestOptions_).mergeFrom(value).buildPartial();
        } else {
          requestOptions_ = value;
        }
        onChanged();
      } else {
        requestOptionsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Common options for this request.
     * </pre>
     *
     * <code>.google.spanner.v1.RequestOptions request_options = 5;</code>
     */
    public Builder clearRequestOptions() {
      if (requestOptionsBuilder_ == null) {
        requestOptions_ = null;
        onChanged();
      } else {
        requestOptions_ = null;
        requestOptionsBuilder_ = null;
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Common options for this request.
     * </pre>
     *
     * <code>.google.spanner.v1.RequestOptions request_options = 5;</code>
     */
    public RequestOptions.Builder getRequestOptionsBuilder() {

      onChanged();
      return getRequestOptionsFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Common options for this request.
     * </pre>
     *
     * <code>.google.spanner.v1.RequestOptions request_options = 5;</code>
     */
    public RequestOptionsOrBuilder getRequestOptionsOrBuilder() {
      if (requestOptionsBuilder_ != null) {
        return requestOptionsBuilder_.getMessageOrBuilder();
      } else {
        return requestOptions_ == null ? RequestOptions.getDefaultInstance() : requestOptions_;
      }
    }
    /**
     *
     *
     * <pre>
     * Common options for this request.
     * </pre>
     *
     * <code>.google.spanner.v1.RequestOptions request_options = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            RequestOptions, RequestOptions.Builder, RequestOptionsOrBuilder>
        getRequestOptionsFieldBuilder() {
      if (requestOptionsBuilder_ == null) {
        requestOptionsBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                RequestOptions, RequestOptions.Builder, RequestOptionsOrBuilder>(
                getRequestOptions(), getParentForChildren(), isClean());
        requestOptions_ = null;
      }
      return requestOptionsBuilder_;
    }

    @Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.spanner.v1.ExecuteBatchDmlRequest)
  }

  // @@protoc_insertion_point(class_scope:google.spanner.v1.ExecuteBatchDmlRequest)
  private static final ExecuteBatchDmlRequest DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new ExecuteBatchDmlRequest();
  }

  public static ExecuteBatchDmlRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ExecuteBatchDmlRequest> PARSER =
      new com.google.protobuf.AbstractParser<ExecuteBatchDmlRequest>() {
        @Override
        public ExecuteBatchDmlRequest parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new ExecuteBatchDmlRequest(input, extensionRegistry);
        }
      };

  public static com.google.protobuf.Parser<ExecuteBatchDmlRequest> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<ExecuteBatchDmlRequest> getParserForType() {
    return PARSER;
  }

  @Override
  public ExecuteBatchDmlRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
